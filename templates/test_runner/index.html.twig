{% extends 'base.html.twig' %}

{% block title %}Test Runner - Symfony App{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .test-suite-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }
        
        .test-suite-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        
        .test-output {
            background-color: #1e1e1e;
            color: #f8f8f2;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            padding: 1rem;
            border-radius: 4px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
            margin-top: 1rem;
        }
        
        .test-output.success {
            border-left: 4px solid #28a745;
        }
        
        .test-output.error {
            border-left: 4px solid #dc3545;
        }
        
        .btn-test {
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .loading-spinner {
            display: none;
            margin-left: 0.5rem;
        }
        
        .test-stats {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        
        .test-history {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .history-item {
            padding: 0.5rem;
            border-bottom: 1px solid #eee;
            font-size: 0.9rem;
        }
        
        .history-item.success {
            background-color: #d4edda;
            border-left: 3px solid #28a745;
        }
        
        .history-item.error {
            background-color: #f8d7da;
            border-left: 3px solid #dc3545;
        }
        
        .coverage-link {
            margin-top: 0.5rem;
        }
        
        .alert-test {
            border-radius: 8px;
            margin-top: 1rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1><i class="fas fa-flask text-primary"></i> Test Runner</h1>
                <div>
                    <button class="btn btn-outline-primary" onclick="refreshStatus()">
                        <i class="fas fa-sync-alt"></i> Refresh Status
                    </button>
                    <a href="{{ path('app_dashboard') }}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Test Statistics -->
    <div class="row">
        <div class="col-12">
            <div class="test-stats" id="test-stats">
                <div class="row">
                    <div class="col-md-3 stat-item">
                        <div class="stat-number" id="total-tests">-</div>
                        <div>Total Test Files</div>
                    </div>
                    <div class="col-md-3 stat-item">
                        <div class="stat-number" id="entity-tests">-</div>
                        <div>Entity Tests</div>
                    </div>
                    <div class="col-md-3 stat-item">
                        <div class="stat-number" id="controller-tests">-</div>
                        <div>Controller Tests</div>
                    </div>
                    <div class="col-md-3 stat-item">
                        <div class="stat-number" id="repository-tests">-</div>
                        <div>Repository Tests</div>
                    </div>
                </div>
                <div class="mt-3 text-center">
                    <small id="phpunit-version">PHPUnit Status: Checking...</small>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Test Suites -->
        <div class="col-lg-8">
            <h3>Test Suites</h3>
            
            <!-- Product Tests -->
            <div class="test-suite-card">
                <h5><i class="fas fa-box text-warning"></i> Product Management Tests</h5>
                <p class="text-muted">Test all product-related functionality including entity, repository, and controller tests.</p>
                
                <div class="mb-3">
                    <button class="btn btn-primary btn-test" onclick="runTest('product-entity')">
                        <i class="fas fa-cube"></i> Entity Tests
                    </button>
                    <button class="btn btn-info btn-test" onclick="runTest('product-repository')">
                        <i class="fas fa-database"></i> Repository Tests
                    </button>
                    <button class="btn btn-success btn-test" onclick="runTest('product-controller')">
                        <i class="fas fa-server"></i> Controller Tests
                    </button>
                    <button class="btn btn-warning btn-test" onclick="runTest('product-all')">
                        <i class="fas fa-play-circle"></i> All Product Tests
                    </button>
                </div>
                
                <div class="mb-2">
                    <button class="btn btn-outline-dark btn-sm" onclick="runCoverage('product-all')">
                        <i class="fas fa-chart-pie"></i> Generate Coverage Report
                    </button>
                </div>
            </div>

            <!-- User Tests -->
            <div class="test-suite-card">
                <h5><i class="fas fa-users text-info"></i> User Management Tests</h5>
                <p class="text-muted">Test user authentication and management functionality.</p>
                
                <div class="mb-3">
                    <button class="btn btn-primary btn-test" onclick="runTest('user-tests')">
                        <i class="fas fa-user-check"></i> User Tests
                    </button>
                </div>
            </div>

            <!-- All Tests -->
            <div class="test-suite-card">
                <h5><i class="fas fa-list text-danger"></i> Complete Test Suite</h5>
                <p class="text-muted">Run all available tests in the application.</p>
                
                <div class="mb-3">
                    <button class="btn btn-danger btn-test" onclick="runTest('all-tests')">
                        <i class="fas fa-rocket"></i> Run All Tests
                    </button>
                </div>
            </div>

            <!-- Test Output -->
            <div id="test-output-container" style="display: none;">
                <h4>Test Output</h4>
                <div id="test-output" class="test-output"></div>
                <div id="coverage-link-container" class="coverage-link" style="display: none;">
                    <a id="coverage-link" href="#" target="_blank" class="btn btn-outline-success">
                        <i class="fas fa-external-link-alt"></i> View Coverage Report
                    </a>
                </div>
            </div>
        </div>

        <!-- Test History and Actions -->
        <div class="col-lg-4">
            <h3>Test History</h3>
            <div class="test-history" id="test-history">
                <div class="text-center text-muted py-3">
                    <i class="fas fa-history fa-2x"></i>
                    <p class="mt-2">No tests run yet</p>
                </div>
            </div>

            <div class="mt-4">
                <h4>Quick Actions</h4>
                <div class="list-group">
                    <button class="list-group-item list-group-item-action" onclick="clearOutput()">
                        <i class="fas fa-eraser"></i> Clear Output
                    </button>
                    <button class="list-group-item list-group-item-action" onclick="clearHistory()">
                        <i class="fas fa-trash"></i> Clear History
                    </button>
                    <a href="{{ path('test_runner_coverage_view', {'suite': 'product'}) }}" target="_blank" class="list-group-item list-group-item-action">
                        <i class="fas fa-chart-line"></i> View Latest Coverage
                    </a>
                </div>
            </div>

            <div class="mt-4">
                <h4>Test Environment</h4>
                <div class="alert alert-info">
                    <small>
                        <strong>Environment:</strong> {{ app.environment }}<br>
                        <strong>Debug Mode:</strong> {{ app.debug ? 'Enabled' : 'Disabled' }}<br>
                        <strong>Test Database:</strong> SQLite (in-memory for tests)
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Running tests... Please wait.</p>
                <small class="text-muted">This may take a few minutes depending on the test suite.</small>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let testHistory = [];
        let loadingModal;

        document.addEventListener('DOMContentLoaded', function() {
            loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
            refreshStatus();
            loadTestHistory();
        });

        async function refreshStatus() {
            try {
                const response = await fetch('{{ path('test_runner_status') }}');
                const data = await response.json();
                
                document.getElementById('total-tests').textContent = data.test_stats.total_tests;
                document.getElementById('entity-tests').textContent = data.test_stats.entity_tests;
                document.getElementById('controller-tests').textContent = data.test_stats.controller_tests;
                document.getElementById('repository-tests').textContent = data.test_stats.repository_tests;
                
                const versionText = data.phpunit_available ? 
                    `✅ ${data.phpunit_version}` : 
                    '❌ PHPUnit not available';
                document.getElementById('phpunit-version').textContent = versionText;
                
            } catch (error) {
                console.error('Failed to load status:', error);
            }
        }

        async function runTest(suite) {
            const outputContainer = document.getElementById('test-output-container');
            const output = document.getElementById('test-output');
            const coverageContainer = document.getElementById('coverage-link-container');
            
            // Show loading modal
            loadingModal.show();
            
            // Clear previous output
            output.textContent = 'Running tests...';
            output.className = 'test-output';
            outputContainer.style.display = 'block';
            coverageContainer.style.display = 'none';

            try {
                const response = await fetch(`{{ path('test_runner_run', {'suite': '__SUITE__'}) }}`.replace('__SUITE__', suite), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                // Update output
                output.textContent = data.output + (data.error ? '\n' + data.error : '');
                output.className = `test-output ${data.success ? 'success' : 'error'}`;
                
                // Add to history
                addToHistory(suite, data.success, data.timestamp);
                
                // Show alert
                showAlert(data.success, suite, data.output);
                
            } catch (error) {
                output.textContent = 'Error: ' + error.message;
                output.className = 'test-output error';
                showAlert(false, suite, error.message);
            } finally {
                loadingModal.hide();
            }
        }

        async function runCoverage(suite) {
            const coverageContainer = document.getElementById('coverage-link-container');
            const coverageLink = document.getElementById('coverage-link');
            
            loadingModal.show();
            
            try {
                const response = await fetch(`{{ path('test_runner_coverage', {'suite': '__SUITE__'}) }}`.replace('__SUITE__', suite), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                if (data.success && data.coverage_url) {
                    coverageLink.href = `{{ path('test_runner_coverage_view', {'suite': '__SUITE__'}) }}`.replace('__SUITE__', suite);
                    coverageContainer.style.display = 'block';
                    showAlert(true, 'Coverage', 'Coverage report generated successfully!');
                } else {
                    showAlert(false, 'Coverage', 'Failed to generate coverage report. Make sure Xdebug is installed.');
                }
                
            } catch (error) {
                showAlert(false, 'Coverage', error.message);
            } finally {
                loadingModal.hide();
            }
        }

        function addToHistory(suite, success, timestamp) {
            const historyItem = {
                suite: suite,
                success: success,
                timestamp: timestamp
            };
            
            testHistory.unshift(historyItem);
            
            // Keep only last 10 items
            if (testHistory.length > 10) {
                testHistory = testHistory.slice(0, 10);
            }
            
            saveTestHistory();
            updateHistoryDisplay();
        }

        function updateHistoryDisplay() {
            const historyContainer = document.getElementById('test-history');
            
            if (testHistory.length === 0) {
                historyContainer.innerHTML = `
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-history fa-2x"></i>
                        <p class="mt-2">No tests run yet</p>
                    </div>
                `;
                return;
            }
            
            historyContainer.innerHTML = testHistory.map(item => `
                <div class="history-item ${item.success ? 'success' : 'error'}">
                    <div class="d-flex justify-content-between">
                        <span><i class="fas fa-${item.success ? 'check' : 'times'}"></i> ${item.suite}</span>
                        <small>${item.timestamp}</small>
                    </div>
                </div>
            `).join('');
        }

        function showAlert(success, suite, message) {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${success ? 'success' : 'danger'} alert-dismissible fade show alert-test`;
            alertContainer.innerHTML = `
                <strong>${success ? 'Success!' : 'Error!'}</strong> ${suite}: ${success ? 'Tests completed successfully' : 'Tests failed'}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.querySelector('.container-fluid').insertBefore(alertContainer, document.querySelector('.row'));
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                if (alertContainer.parentNode) {
                    alertContainer.remove();
                }
            }, 5000);
        }

        function clearOutput() {
            const outputContainer = document.getElementById('test-output-container');
            outputContainer.style.display = 'none';
        }

        function clearHistory() {
            testHistory = [];
            saveTestHistory();
            updateHistoryDisplay();
        }

        function saveTestHistory() {
            localStorage.setItem('testHistory', JSON.stringify(testHistory));
        }

        function loadTestHistory() {
            const saved = localStorage.getItem('testHistory');
            if (saved) {
                testHistory = JSON.parse(saved);
                updateHistoryDisplay();
            }
        }
    </script>
{% endblock %}
